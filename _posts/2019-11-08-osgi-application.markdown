---
layout: post
title:  "Создание простого приложения на платформе OSGi"
date:   2019-11-08 08:19:26 +0300
categories: eclipse
---
Платформа OSGi не только позволяет создавать модульные приложения, но и упрощает управление зависимостями.

> Управление разрешением зависимостей позволяет вам объявить о требуемых вашим приложением модулях и библиотеках, не заботясь о том, где их хранить и как их передавать другим разработчикам.

## Создание приложения

Рассмотрим типовой процесс создания приложения в Eclipse IDE.

### Создание проекта модуля

> Модуль и плагин (Bundle или Plug-in) в данном руководстве являются синонимами

Приложение OSGi состоит из модулей. В данном примере мы создаем основной модуль приложения.

Создаем проект модуля:
* File->New...->Project...->Plug-in Development->Plug-in Project
* Вводим название проекта и выбираем платформу для запуска модуля - Eclipse
* Снимаем все галочки и отказываемся от создания RCP приложения

Созданный проект модуля должен иметь следующую структуру:
(скриншот)

### Описание приложения

Прежде чем переходить к написанию кода, следует уведомить Платформу о нашем будущем приложении. Для этого воспользуемся точкой расширения `org.eclipse.core.runtime.applications`. Эта точка расширения предоставлена модулем платформы `org.eclipse.core.runtime`, поэтому сначала следует добавить этот модуль в зависимости к нашему. Для этого откроем файл `META-INF/MANIFEST.MF` и в открывшемся окне перейдем на вкладку Dependencies, где в разделе Required Plug-ins добавим необходимый модуль. Теперь создаем расширение - переходим на вкладку Extensions и добавляем расширение, выбрав вышеупомянутую точку расширения.

(скриншот)

Выбрав созданный элемент расширения зададим идентификатор нашего приложения. Идентификатор, который вы здесь укажете, будет автоматически дополнен префиксом - идентификатором нашего модуля. То есть, если указать в этом поле `myApp`, то полный идентификатор приложения будет `hello-osgi.myApp`. Мы учтём эту особенность, и на следующих этапах заметим как она используется.

В пункте `(application)` можно настроить некоторые параметры приложения, но это выходит за рамки данного примера, поэтому сделаем необходимый минимум. Воспользовавшись контекстным меню этого пункта, создайте элемент `run`. В этом элементе конфигурации указывается класс, который будет реализовывать наше приложение. В правой части окна нажмите на метку "class*" рядом с полем для ввода, откроется диалог создания нового класса.

### Реализация приложения

В открывшемся диалоге укажите название класса приложения. Обычно в модуле присутствует лишь одно приложение, поэтому подойдет название `Application`. Создаем класс нажатием кнопки Finish.

Класс Application имеет следующую структуру:

{% highlight java %}
public class Application implements IApplication
{

	@Override
	public Object start(IApplicationContext a_context) throws Exception
	{
        // выполняем какую-либо работу или создаем GUI
		return 0;
	}

	@Override
	public void stop()
	{
        // завершаем работу или закрываем окно
	}

}
{% endhighlight %}

Интерфейс `IApplication` имеет два метода - `start()` и `stop()`, которые предна

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/

---
layout: post
title:  "Создание простого приложения на платформе OSGi"
categories: eclipse
published: true
---
Платформа OSGi не только позволяет создавать модульные приложения, но и упрощает управление зависимостями.

> Управление разрешением зависимостей позволяет вам объявить о требуемых вашим приложением модулях и библиотеках, не заботясь о том, где их хранить и как их передавать другим разработчикам.

## Создание приложения

Рассмотрим типовой процесс создания приложения в Eclipse IDE.

### Создание проекта модуля

> Модуль и плагин (Bundle или Plug-in) в данном руководстве являются синонимами

Приложение OSGi состоит из модулей. В данном примере мы создаем основной модуль приложения.

Создаем проект модуля:
* File→New...→Project...→Plug-in Development→Plug-in Project
* Вводим название проекта и выбираем платформу для запуска модуля - Eclipse[^1]
* Снимаем все галочки и отказываемся от создания RCP приложения
* Так же отказываемся от использования шаблона

![Создание проекта модуля]({{site.baseurl}}/assets/eclipse/app/new-project.png)

[^1]: Платформа Eclipse построена на OSGi, поэтому мы выбираем Eclipse, как более функциональную для наших задач.

Созданный проект модуля будет иметь следующую структуру:

![Создание проекта модуля]({{site.baseurl}}/assets/eclipse/app/project.png)

### Описание приложения

Прежде чем переходить к написанию кода, следует объявить о будущем приложении и подключить необходимые зависимости. Для этого воспользуемся точкой расширения `org.eclipse.core.runtime.applications`. Эта точка расширения предоставлена модулем платформы `org.eclipse.core.runtime`, поэтому сначала следует добавить этот модуль в зависимости к нашему. Для этого откроем файл *META-INF/MANIFEST.MF* и в открывшемся окне перейдем на вкладку *Dependencies*, где в разделе *Required Plug-ins* добавим необходимый модуль. 

![Создание проекта модуля]({{site.baseurl}}/assets/eclipse/app/dependency.png)

Сохраните файл, чтобы применить изменения в зависимостях. Далее необходимо зарегистрировать Приложение в Платформе. Для этого создаем расширение -- переходим на вкладку *Extensions* и добавляем расширение, выбрав вышеупомянутый идентификатор точки.

Выбрав созданный элемент расширения, зададим идентификатор приложения. Идентификатор, который вы здесь укажете, будет автоматически дополнен префиксом - идентификатором модуля, в котором приложение описано. То есть, если указать в этом поле `myApp`, то полный идентификатор приложения будет `my.app.myApp`. На следующих этапах мы заметим как используется эта особенность.

В пункте `(application)` можно настроить некоторые параметры приложения, но это выходит за рамки данного примера, поэтому сделаем необходимый минимум. Воспользовавшись контекстным меню этого пункта, создайте элемент `run`. В этом элементе конфигурации указывается класс, который будет реализовывать наше приложение.

![Создание проекта модуля]({{site.baseurl}}/assets/eclipse/app/extension.png)

В правой части окна нажмите на метку *class\** рядом с полем для ввода, откроется диалог создания нового класса, который рассмотрим в следующем разделе.

### Реализация приложения

В обычном приложении на Java есть точка входа -- главный класс, имеющий метод `main(String[])`. В приложении Eclipse точкой входа служит класс, реализующий интерфейс `IApplication`, имеющий два метода `start()` и `stop()`, которые вызываются Платформой в соответствующие моменты жизни Приложения.

Так, чтобы начать, создадим класс `Application`, реализующий интерфейс `IApplication`.

{% highlight java %}
public class Application implements IApplication
{
  @Override
  public Object start(IApplicationContext a_context) throws Exception
  {
    // выполняем какую-либо работу или создаем GUI
    
    return 0; // возвращаем ноль, если работа завершена успешно
  }

  @Override
  public void stop()
  {
    // завершаем работу или закрываем окно
  }
}
{% endhighlight %}

В методе `start()` реализуется логика работы программы, а выход из этого метода равнозначен завершению программы. При этом возвращаемое значение ([exit code](https://en.wikipedia.org/wiki/Exit_status)) должно быть *0* в случае успешного завершения работы, и отличное от нуля значение в случае возникновения ошибок.  
Метод `stop()` вызывается Платформой в некоторых редких случаях, чтобы принудительно остановить программу. В реализации этого метода стоит прервать основной код программы, чтобы работа метода `start()` завершилась как можно скорее.

### Агрументы запуска приложения

Вы можете получить доступ к аргументам запуска вашего приложения через аргумент `IApplicationContext a_context`:

{% highlight java %}
public Object start(IApplicationContext a_context) throws Exception
{
  String[] args = (String[]) a_context.getArguments().get(IApplicationContext.APPLICATION_ARGS);
  String userName = args[0];
  System.out.println("Привет, " + userName);
  
  return 0;
}
{% endhighlight %}

### Конфигурация запуска приложения

Чтобы запустить приложение и создать конфигурацию запуска по-умолчанию, откройте файл `plugin.xml` и на вкладке *Overview* выберите пункт ![Launch an Eclipse application]({{site.baseurl}}/assets/eclipse/app/launch-0.png). Приложение запустится и в консоли можно будет увидеть результат:

![Консоль]({{site.baseurl}}/assets/eclipse/app/launch-console.png) 
> Возможно, вы увидите немного другой результат. Чтобы задать аргумент, см. ниже

Отредактировать конфигурацию можно выбрав в меню Run→Run Configurations...: вы увидите список конфигураций в левой части окна и форму для редактирования в правой. Выберите конфигурацию запуска приложения, её название будет соответствовать идентификатору приложения:

![Конфигурация запуска]({{site.baseurl}}/assets/eclipse/app/launch-1.png)

Здесь в поле *Run an application* можно выбрать запускаемое приложение, а в поле *Execution environment* выбрать версию Java-машины.
На вкладке *Arguments* можно задать аргументы запуска приложения:

![Конфигурация запуска]({{site.baseurl}}/assets/eclipse/app/launch-2.png)

Как видно, здесь присутствуют некоторые служебные аргументы, после которых можно задать собственные, на скриншоте добавлен аргумент "Michael" для примера из предыдущего подраздела. Служебные аргументы не попадают в список аргументов, получаемый через `IApplicationContext.APPLICATION_ARGS`.  
Также на данной вкладке можно задать рабочую директорию приложения.

На вкладке *Plug-ins* отмечены модули, которые используются при запуске приложения.

### Экспорт приложения

Для того, чтобы получить готовый к распространению пакет файлов приложения, необходимо выполнить его экспорт. Операция сборки и экспорта приложения в среде Eclipse называется "Экспорт Продукта" ("Product export").

![Взаимосвязь Сущностей]({{site.baseurl}}/assets/eclipse/app/app-product.png)

#### Создание конфигурации Продукта

В проект приложения добавляем Конфигурацию Продукта:
* File→New...→Other...→Plug-in Development→Product Configuration
* Выбираем проект приложения, вводим имя файла *myapp.product*
* Выбираем опцию *Use a launch configuration* и конфигурацию запуска приложения

![Конфигурация Продукта]({{site.baseurl}}/assets/eclipse/app/product-1.png)

Далее откроется окно редактирования конфигурации Продукта. Здесь можно настроить различные параметры приложения, список плагинов, которые будут поставляться в составе продукта, название исполняемого файла и прочее. Для экспорта достаточно выбрать описание Продукта на вкладке *Overview*. В нашем приложении еще нет описания Продукта (не путать с конфигурацией Продукта), поэтому создадим его, нажав кнопку *New*. В открывшемся диалоговом окне нужно ввести название продукта, выбрать основной модуль, в котором описано Приложение, а также выбрать само Приложение из выпадающего списка.

Если ваше приложение консольное (как в примере), то убедитесь, что на вкладке *Launching* в поле *Program Arguments*, присутствуют аргументы `-consoleLog -noExit`. Они необходимы, чтобы при запуске приложения увидеть окно консоли, и чтобы оно не закрылось автоматически при завершении работы программы.

#### Экспорт Продукта

Теперь можно произвести экспорт Продукта. На вкладке *Overview* нажмите *Eclipse Product export wizard*:
* Выберите директорию экспорта в разделе *Destination*
* Введите название директории продукта (*Root directory*), в ней будут располагаться файлы приложения. Эта директория будет создана в директории, выбранной в предыдущем пункте
* Остальные опции оставьте как есть и нажмите Finish

#### Решение проблемы с кодировкой

Если при запуске экспортированного в среде Eclipse приложения возникают проблемы с кодировкой выводимых строк (в GUI или консоли), то необходимо:
* В каждом плагине в *build.properties* добавить строку `javacDefaultEncoding.. =  UTF-8`
* В конфигурации продукта в *Launching*→*VM Arguments* добавить `-Dfile.encoding=UTF-8`

Проблема в том, что в исходном коде принято использовать *UTF-8*, а при экспорте продукта Eclipse запускает Java-компилятор с кодировкой по-умолчанию для ОС. Для Windows это обычно *Cp1251*. Данные опции указывают, что при компиляции и работе с файлами следует использовать *UTF-8*.

## Дополнительная информация

* [Проект Eclipse]({{site.baseurl}}/assets/eclipse/app/example.zip), использованный в качестве примера
* <http://codeandme.blogspot.com/2012/02/creating-headless-application.html>
* <https://www.vogella.com/tutorials/EclipseProductDeployment/article.html>

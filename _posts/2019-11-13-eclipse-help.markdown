---
layout: post
title:  "Шпаргалка по созданию плагина документации"
categories: eclipse
---

## Основные понятия



### ToC (Table of Contents) - оглавление

Файлы toc*.xml описывают Оглавление документации. Оглавления могут включать в себя Темы (topic) и Якори (anchor).

Кроме названия (Name), для Оглавления можно указать путь (Location) к HTML-содержимому. Это содержимое может содержать вводную информацию по разделу. Если содержимое Оглавления не задано, то при выборе пункта Оглавления в справочной системе будет выведен список подразделов и тем этой главы. Также для Оглавления определенной темы можно указать якорь (Anchor), чтобы включить все темы этого Оглавления в определенное место другого Оглавления. Этот механизм используется для разделения описания структуры объемной документации с множеством тем на разные файлы, а так же для реализации возможности дополнения разделов документации другими плагинами Eclipse.

### Topic - тема

Тема описывает подраздел документации и имеет название (Name) и путь (Location) к HTML-содержимому темы документации. Также Тема может содержать в себе другие Темы, для реализации структурной иерархии документации. Чтобы описывать масштабные иерархии и поддерживать расширяемость документации, можно использовать механизм Ссылок (Link) или Якорей (Anchor).

### Link - ссылка

Ссылка позволяет связать два TOC файла (Оглавления) между собой. В определенной Теме первого файла добавляется элемент Ссылка, в которой указывается путь к второму TOC файлу. В результате, во время выполнения программы, все Темы второго TOC файла станут вложенными темами Темы первого файла.

### Anchor - якорь

Якорь так же позволяет связать два TOC файла (Оглавления) между собой. В определенной Теме первого файла добавляется элемент Якорь с уникальным идентификатором. Во втором файле, в свойстве Anchor элемента TOC указывается ссылка на Якорь в формате `toc.xml#anchorId`, где `toc.xml` это первый файл Оглавления, в котором определён Якорь с идентификатором `anchorId`.

## Применение Якоря и Ссылки

Объемную документацию проще сопровождать, разделив на составные части. Для решения этой задачи в рамках создания плагина документации существуют соответствующие инструменты, позволяющие разделить описание различных частей документации на несколько файлов Оглавлений.

С помощью Якоря реализуется композиция Снизу-Вверх, где часть документации нижнего уровня содержит ссылку на часть верхнего уровня. Это полезно для поддержки расширяемости документации при добавлении новых модулей ПО.

С помощью Ссылки реализуется композиция Сверху-Вниз, где часть документации верхнего уровня содержат ссылку на часть нижнего уровня. Это более простой, классический подход.

![Взаимосвязь компонентов]({{site.baseurl}}/assets/eclipse/help/toc-link-anchor1.png)

При загрузке платформа Eclipse обработает эти связи и создаст в памяти целостную структуру, объеденив поддеревья:

![Взаимосвязь компонентов]({{site.baseurl}}/assets/eclipse/help/toc-link-anchor2.png)

## Создание плагина документации

### Плагин документации

Создайте новый проект плагина `myapp.help`, используя шаблон "Sample help content". Чтобы получить доступ к этому шаблону, на второй странице мастера создания плагина укажите, что создавать RCP приложение не требуется. Eclipse создаст проект плагина, в котором:

- в /plugin.xml в расширении `org.eclipse.help.toc` указаны ссылки на toc-файлы
- в файлах типа /toc.xml хранится описание разделов документации и ссылки на HTML-файлы
- в директории /html/ хранятся файлы с собственно содержимым Тем документации в формате HTML

![Взаимосвязь компонентов]({{site.baseurl}}/assets/eclipse/help/plugin-toc-html.png)

Добавьте в зависимости вашему плагину следующие плагины:

- org.eclipse.help.ui
- org.eclipse.help.webapp
- org.eclipse.equinox.http.jetty

### Приложение для тестирования

Создайте новый проект плагина (RCP-приложение) `myapp.rcp`, используя шаблон "RCP 3.x application (minimal)". Добавьте в зависимости плагин документации `myapp.help`, созданный на предыдущем этапе. Добавьте расширение меню - пункт, привязанный к команде `org.eclipse.ui.help.displayHelp`.

Теперь запустите приложение (на вкладке Overview пункт Launch an Eclipse application). Если все сделано правильно, появится пустое окно с единственным пунктом главного меню "Display Help", по нажатию на который будет открываться справочная система.



{% highlight java %}
public class Application implements IApplication
{

	@Override
	public Object start(IApplicationContext a_context) throws Exception
	{
        // выполняем какую-либо работу или создаем GUI
		return 0;
	}

	@Override
	public void stop()
	{
        // завершаем работу или закрываем окно
	}

}
{% endhighlight %}

Интерфейс `IApplication` имеет два метода - `start()` и `stop()`, которые предна

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
